#!/usr/bin/env python3
"""yt_dlp wrapper to cleanup some URLs"""

from urllib.parse import urlparse, urlunsplit
import argparse
import sys

import yt_dlp as ytdl

VERSION = f"0.0.7+{ytdl.version.__version__}({ytdl.__name__})"


def clean_url(url):
    """cleans rutube url"""
    parsed = urlparse(url)
    if parsed.netloc != 'rutube.ru' and not parsed.netloc.endswith('.rutube.ru'):
        return url
    return urlunsplit(parsed[:3] + ('', ''))


class YDLLogger(object):
    """YDL Logger object."""

    def debug(self, msg):
        """Outputs debug messages"""
        ends = '\r' if '[download]' in msg else '\n'
        print("DEBUG: %s" % msg, end=ends, flush=True)

    def warning(self, msg):
        """Outputs warnings"""
        print("WARNING: %s" % msg)

    def error(self, msg):
        """Outputs errors"""
        print("ERROR: %s" % msg)

    def info(self, msg):
        """Outputs info messages"""
        print("INFO: %s" % msg)


def main(args):
    cleaned_urls = list([clean_url(u) for u in args.url])

    ydl_opts = {
        'retries': 5,
        'restrict-filenames': 'yes',
        'logger': YDLLogger(),
        'no-playlist': 'yes',
        'ffmpeg-location':  '/usr/bin/ffmpeg',
        'proxy': args.proxy,
        'outtmpl': args.output,
        'verbose': args.verbose,
    }

    try:
        with ytdl.YoutubeDL(ydl_opts) as ydl:
            rc = ydl.download(cleaned_urls)
    except ytdl.utils.YoutubeDLError as excp:
        print("EXCEPTION: %s" % excp)
        return 1
    else:
        print("DEBUG: No exception.")
        return rc


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + VERSION)
    parser.add_argument('url', nargs='+', help='url to parse')
    parser.add_argument('--proxy', help='proxy server')
    parser.add_argument('-o', '--output', help="destination filename", default=ytdl.utils.DEFAULT_OUTTMPL)
    parser.add_argument('-v', '--verbose', action='store_true', help="verbose output")
    args = parser.parse_args()
    sys.exit(main(args))
