#!/usr/bin/env python3
"""youtube-dl wrapper to cleanup some URLs"""

from urllib.parse import urlparse, urlunsplit
import argparse

import youtube_dl


TEST_URLS = [
    'https://rutube.ru/video/abc/?pl_id=1234&pl_type=source',
    'https://rutube.ru/video/def/?pl_id=5678&pl_type=source',
    'https://rutube.ru/video/ghj/?pl_id=90ab&pl_type=source',
]

VERSION = f"0.0.1+{youtube_dl.version.__version__}"


def clean_url(url):
    """cleans rutube url"""

    if not 'rutube.ru' in url:
        return url

    segments = urlparse(url)

    return urlunsplit(segments[:3] + ('', ''))


def ydl_progress_hook(d):
    if d['status'] == 'finished':
        print('Download completed.')
    elif d['status'] == 'downloading':
        total = d.get('total_bytes', d.get('total_bytes_estimate', None))
        downloaded = d['downloaded_bytes']
        if total is not None:
            progress = round(100 * (downloaded / total))
            ydl_progress.print(progress)
    else:
        print('hook: status %s' % d['status'])


class YDLLogger(object):
    """YDL Logger object."""

    def debug(self, msg):
        """Outputs debug messages"""
        ends = '\r' if '[download]' in msg else '\n'
        print("DEBUG: %s" % msg, end=ends, flush=True)

    def warning(self, msg):
        """Outputs warnings"""
        print("WARNING: %s" % msg)

    def error(self, msg):
        """Outputs errors"""
        print("ERROR: %s" % msg)

    def info(self, msg):
        """Outputs info messages"""
        print("INFO: %s" % msg)

def main(urls, proxy=None):
    cleaned_urls = list([clean_url(u) for u in urls])

    ydl_opts = {
        'retries': 5,
        'restrict-filenames': 'yes',
        'logger': YDLLogger(),
        'no-playlist': 'yes',
        'ffmpeg-location':  '/usr/bin/ffmpeg',
    }

    if proxy is not None:
        ydl_opts['proxy'] = proxy

    try:
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download(cleaned_urls)
    except Exception as excp:
        print("DEBUG: %s" % excp)
        return False
    else:
        print("DEBUG: No exception.")
        return True


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + VERSION)
    parser.add_argument('url', nargs='+', help='url to parse')
    parser.add_argument('--proxy', help='proxy server')
    args = parser.parse_args()

    main(args.url, args.proxy)
